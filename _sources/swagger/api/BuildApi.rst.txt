dohq_teamcity.BuildApi
######################################

.. note::

   + All ``serve_*`` method have aliases with get: ``serve_something`` == ``get_something``
   + Some API have ``get`` method - default method to get object by locator (e.g ``agent_api.get('id:123')`` return ``Agent`` model by id
   + See more examples on page :doc:`/examples/api/BuildApi` and model examples
   + This is autogenerated page, don't change them directly, use template. Read more in :doc:`/development`

.. list-table::
   :widths: 20 80
   :header-rows: 1

   * - Method
     - HTTP request
   * - :ref:`add_tags`
     - **POST** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`cancel_build`
     - **POST** ``/app/rest/builds/{buildLocator}``
   * - :ref:`cancel_build_0`
     - **GET** ``/app/rest/builds/{buildLocator}/example/buildCancelRequest``
   * - :ref:`delete_build`
     - **DELETE** ``/app/rest/builds/{buildLocator}``
   * - :ref:`delete_builds`
     - **DELETE** ``/app/rest/builds``
   * - :ref:`delete_comment`
     - **DELETE** ``/app/rest/builds/{buildLocator}/comment``
   * - :ref:`get_artifacts_directory`
     - **GET** ``/app/rest/builds/{buildLocator}/artifactsDirectory``
   * - :ref:`get_canceled_info`
     - **GET** ``/app/rest/builds/{buildLocator}/canceledInfo``
   * - :ref:`get_children`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/children{path}``
   * - :ref:`get_children_alias`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/{path}``
   * - :ref:`get_content`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/content{path}``
   * - :ref:`get_content_alias`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/files{path}``
   * - :ref:`get_metadata`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/metadata{path}``
   * - :ref:`get_parameter`
     - **GET** ``/app/rest/builds/{buildLocator}/resulting-properties/{propertyName}``
   * - :ref:`get_pinned`
     - **GET** ``/app/rest/builds/{buildLocator}/pin``
   * - :ref:`get_problems`
     - **GET** ``/app/rest/builds/{buildLocator}/problemOccurrences``
   * - :ref:`get_root`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts``
   * - :ref:`get_tests`
     - **GET** ``/app/rest/builds/{buildLocator}/testOccurrences``
   * - :ref:`get_zipped`
     - **GET** ``/app/rest/builds/{buildLocator}/artifacts/archived{path}``
   * - :ref:`pin_build`
     - **PUT** ``/app/rest/builds/{buildLocator}/pin``
   * - :ref:`replace_comment`
     - **PUT** ``/app/rest/builds/{buildLocator}/comment``
   * - :ref:`replace_tags`
     - **PUT** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`serve_aggregated_build_status`
     - **GET** ``/app/rest/builds/aggregated/{buildLocator}/status``
   * - :ref:`serve_aggregated_build_status_icon`
     - **GET** ``/app/rest/builds/aggregated/{buildLocator}/statusIcon{suffix}``
   * - :ref:`serve_all_builds`
     - **GET** ``/app/rest/builds``
   * - :ref:`serve_build`
     - **GET** ``/app/rest/builds/{buildLocator}``
   * - :ref:`serve_build_actual_parameters`
     - **GET** ``/app/rest/builds/{buildLocator}/resulting-properties``
   * - :ref:`serve_build_field_by_build_only`
     - **GET** ``/app/rest/builds/{buildLocator}/{field}``
   * - :ref:`serve_build_related_issues`
     - **GET** ``/app/rest/builds/{buildLocator}/relatedIssues``
   * - :ref:`serve_build_related_issues_old`
     - **GET** ``/app/rest/builds/{buildLocator}/related-issues``
   * - :ref:`serve_build_statistic_value`
     - **GET** ``/app/rest/builds/{buildLocator}/statistics/{name}``
   * - :ref:`serve_build_statistic_values`
     - **GET** ``/app/rest/builds/{buildLocator}/statistics``
   * - :ref:`serve_build_status_icon`
     - **GET** ``/app/rest/builds/{buildLocator}/statusIcon{suffix}``
   * - :ref:`serve_source_file`
     - **GET** ``/app/rest/builds/{buildLocator}/sources/files/{fileName}``
   * - :ref:`serve_tags`
     - **GET** ``/app/rest/builds/{buildLocator}/tags``
   * - :ref:`unpin_build`
     - **DELETE** ``/app/rest/builds/{buildLocator}/pin``

.. _add_tags:

add_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.add_tags(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->add_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _cancel_build:

cancel_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    body = dohq_teamcity.BuildCancelRequest() # BuildCancelRequest |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.cancel_build(build_locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->cancel_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - `BuildCancelRequest <../models/BuildCancelRequest.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _cancel_build_0:

cancel_build_0
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        api_response = tc.build_api.cancel_build_0(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->cancel_build_0: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    `BuildCancelRequest <../models/BuildCancelRequest.html>`_

`Back to top <#>`_

.. _delete_build:

delete_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        tc.build_api.delete_build(build_locator)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_builds:

delete_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        locator = 'locator_example' # str |  (optional)

    try:
        tc.build_api.delete_builds(locator=locator)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **locator**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _delete_comment:

delete_comment
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        tc.build_api.delete_comment(build_locator)
    except ApiException as e:
        print("Exception when calling BuildApi->delete_comment: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_artifacts_directory:

get_artifacts_directory
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        api_response = tc.build_api.get_artifacts_directory(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_artifacts_directory: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_canceled_info:

get_canceled_info
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.get_canceled_info(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_canceled_info: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Comment <../models/Comment.html>`_

`Back to top <#>`_

.. _get_children:

get_children
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        api_response = tc.build_api.get_children(path, build_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_children: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_children_alias:

get_children_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        api_response = tc.build_api.get_children_alias(path, build_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_children_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_content:

get_content
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        tc.build_api.get_content(path, build_locator, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
    except ApiException as e:
        print("Exception when calling BuildApi->get_content: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_content_alias:

get_content_alias
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        tc.build_api.get_content_alias(path, build_locator, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
    except ApiException as e:
        print("Exception when calling BuildApi->get_content_alias: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _get_metadata:

get_metadata
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        api_response = tc.build_api.get_metadata(path, build_locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_metadata: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `file <../models/file.html>`_

`Back to top <#>`_

.. _get_parameter:

get_parameter
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    property_name = 'property_name_example' # str | 

    try:
        api_response = tc.build_api.get_parameter(build_locator, property_name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_parameter: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **property_name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_pinned:

get_pinned
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        api_response = tc.build_api.get_pinned(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_pinned: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _get_problems:

get_problems
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.get_problems(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_problems: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `ProblemOccurrences <../models/ProblemOccurrences.html>`_

`Back to top <#>`_

.. _get_root:

get_root
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        api_response = tc.build_api.get_root(build_locator, base_path=base_path, locator=locator, fields=fields, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_root: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    `Files <../models/Files.html>`_

`Back to top <#>`_

.. _get_tests:

get_tests
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.get_tests(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->get_tests: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `TestOccurrences <../models/TestOccurrences.html>`_

`Back to top <#>`_

.. _get_zipped:

get_zipped
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        path = 'path_example' # str | 
    build_locator = 'build_locator_example' # str | 
    base_path = 'base_path_example' # str |  (optional)
    locator = 'locator_example' # str |  (optional)
    name = 'name_example' # str |  (optional)
    resolve_parameters = true # bool |  (optional)
    log_build_usage = true # bool |  (optional)

    try:
        tc.build_api.get_zipped(path, build_locator, base_path=base_path, locator=locator, name=name, resolve_parameters=resolve_parameters, log_build_usage=log_build_usage)
    except ApiException as e:
        print("Exception when calling BuildApi->get_zipped: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **path**
     - **str**
     - 
   * - **build_locator**
     - **str**
     - 
   * - **base_path**
     - **str**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **name**
     - **str**
     - [optional] 
   * - **resolve_parameters**
     - **bool**
     - [optional] 
   * - **log_build_usage**
     - **bool**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _pin_build:

pin_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        tc.build_api.pin_build(build_locator, body=body)
    except ApiException as e:
        print("Exception when calling BuildApi->pin_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _replace_comment:

replace_comment
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        tc.build_api.replace_comment(build_locator, body=body)
    except ApiException as e:
        print("Exception when calling BuildApi->replace_comment: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _replace_tags:

replace_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    body = dohq_teamcity.Tags() # Tags |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.replace_tags(build_locator, locator=locator, body=body, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->replace_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **body**
     - `Tags <../models/Tags.html>`_
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _serve_aggregated_build_status:

serve_aggregated_build_status
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 

    try:
        api_response = tc.build_api.serve_aggregated_build_status(build_locator)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_aggregated_build_status: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _serve_aggregated_build_status_icon:

serve_aggregated_build_status_icon
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    suffix = 'suffix_example' # str | 

    try:
        tc.build_api.serve_aggregated_build_status_icon(build_locator, suffix)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_aggregated_build_status_icon: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **suffix**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _serve_all_builds:

serve_all_builds
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_type = 'build_type_example' # str |  (optional)
    status = 'status_example' # str |  (optional)
    triggered_by_user = 'triggered_by_user_example' # str |  (optional)
    include_personal = true # bool |  (optional)
    include_canceled = true # bool |  (optional)
    only_pinned = true # bool |  (optional)
    tag = ['tag_example'] # list[str] |  (optional)
    agent_name = 'agent_name_example' # str |  (optional)
    since_build = 'since_build_example' # str |  (optional)
    since_date = 'since_date_example' # str |  (optional)
    start = 789 # int |  (optional)
    count = 56 # int |  (optional)
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_all_builds(build_type=build_type, status=status, triggered_by_user=triggered_by_user, include_personal=include_personal, include_canceled=include_canceled, only_pinned=only_pinned, tag=tag, agent_name=agent_name, since_build=since_build, since_date=since_date, start=start, count=count, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_all_builds: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_type**
     - **str**
     - [optional] 
   * - **status**
     - **str**
     - [optional] 
   * - **triggered_by_user**
     - **str**
     - [optional] 
   * - **include_personal**
     - **bool**
     - [optional] 
   * - **include_canceled**
     - **bool**
     - [optional] 
   * - **only_pinned**
     - **bool**
     - [optional] 
   * - **tag**
     - `list[str] <../models/str.html>`_
     - [optional] 
   * - **agent_name**
     - **str**
     - [optional] 
   * - **since_build**
     - **str**
     - [optional] 
   * - **since_date**
     - **str**
     - [optional] 
   * - **start**
     - **int**
     - [optional] 
   * - **count**
     - **int**
     - [optional] 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Builds <../models/Builds.html>`_

`Back to top <#>`_

.. _serve_build:

serve_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_build(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Build <../models/Build.html>`_

`Back to top <#>`_

.. _serve_build_actual_parameters:

serve_build_actual_parameters
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_build_actual_parameters(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_actual_parameters: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _serve_build_field_by_build_only:

serve_build_field_by_build_only
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    field = 'field_example' # str | 

    try:
        api_response = tc.build_api.serve_build_field_by_build_only(build_locator, field)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_field_by_build_only: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **field**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _serve_build_related_issues:

serve_build_related_issues
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_build_related_issues(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_related_issues: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `IssuesUsages <../models/IssuesUsages.html>`_

`Back to top <#>`_

.. _serve_build_related_issues_old:

serve_build_related_issues_old
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_build_related_issues_old(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_related_issues_old: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `IssuesUsages <../models/IssuesUsages.html>`_

`Back to top <#>`_

.. _serve_build_statistic_value:

serve_build_statistic_value
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    name = 'name_example' # str | 

    try:
        api_response = tc.build_api.serve_build_statistic_value(build_locator, name)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_statistic_value: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **name**
     - **str**
     - 

Return type:
    **str**

`Back to top <#>`_

.. _serve_build_statistic_values:

serve_build_statistic_values
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_build_statistic_values(build_locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_statistic_values: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Properties <../models/Properties.html>`_

`Back to top <#>`_

.. _serve_build_status_icon:

serve_build_status_icon
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    suffix = 'suffix_example' # str | 

    try:
        tc.build_api.serve_build_status_icon(build_locator, suffix)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_build_status_icon: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **suffix**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _serve_source_file:

serve_source_file
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    file_name = 'file_name_example' # str | 

    try:
        tc.build_api.serve_source_file(build_locator, file_name)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_source_file: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **file_name**
     - **str**
     - 

Return type:
    void (empty response body)

`Back to top <#>`_

.. _serve_tags:

serve_tags
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    locator = 'locator_example' # str |  (optional)
    fields = 'fields_example' # str |  (optional)

    try:
        api_response = tc.build_api.serve_tags(build_locator, locator=locator, fields=fields)
       pprint(api_response)
    except ApiException as e:
        print("Exception when calling BuildApi->serve_tags: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **locator**
     - **str**
     - [optional] 
   * - **fields**
     - **str**
     - [optional] 

Return type:
    `Tags <../models/Tags.html>`_

`Back to top <#>`_

.. _unpin_build:

unpin_build
-----------------

.. code-block:: python

    from pprint import pprint
    from dohq_teamcity import TeamCity, ApiException

    # username/password authentication
    tc = TeamCity("https://teamcity.example.com", auth=('username', 'password'))

        build_locator = 'build_locator_example' # str | 
    body = 'body_example' # str |  (optional)

    try:
        tc.build_api.unpin_build(build_locator, body=body)
    except ApiException as e:
        print("Exception when calling BuildApi->unpin_build: %s\n" % e)



.. list-table::
   :widths: 20 20 60
   :header-rows: 1

   * - Name
     - Types
     - Notes

   * - **build_locator**
     - **str**
     - 
   * - **body**
     - **str**
     - [optional] 

Return type:
    void (empty response body)

`Back to top <#>`_

